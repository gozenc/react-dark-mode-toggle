import { HTMLAttributes, MouseEvent as ReactMouseEvent } from 'react';
export interface DarkModeToggleProps extends HTMLAttributes<HTMLSpanElement> {
    onClick?: (event: ReactMouseEvent<HTMLSpanElement>) => void;
    onModeChange?: (mode: ModeName) => void;
    size?: number | string;
    radius?: string;
    padding?: number | string;
    preventDefault?: boolean;
    localStorageKey?: string;
    rootElement?: HTMLElement;
    wrapperClassName?: string;
    darkClassName?: string;
    colors?: {
        backgroundColor?: string;
        backgroundColorDark?: string;
        backgroundColorHover?: string;
        backgroundColorHoverDark?: string;
        color?: string;
        colorDark?: string;
        colorHover?: string;
        colorHoverDark?: string;
    };
}
type ModeName = "light" | "dark";
export declare function DarkModeToggle(props: DarkModeToggleProps): import('react').DetailedReactHTMLElement<{
    preventDefault?: boolean;
    defaultChecked?: boolean | undefined;
    defaultValue?: string | number | readonly string[] | undefined;
    suppressContentEditableWarning?: boolean | undefined;
    suppressHydrationWarning?: boolean | undefined;
    accessKey?: string | undefined;
    autoCapitalize?: "off" | "none" | "on" | "sentences" | "words" | "characters" | undefined | (string & {});
    autoFocus?: boolean | undefined;
    contentEditable?: (boolean | "true" | "false") | "inherit" | "plaintext-only" | undefined;
    contextMenu?: string | undefined;
    dir?: string | undefined;
    draggable?: (boolean | "true" | "false") | undefined;
    enterKeyHint?: "enter" | "done" | "go" | "next" | "previous" | "search" | "send" | undefined;
    hidden?: boolean | undefined;
    id?: string | undefined;
    lang?: string | undefined;
    nonce?: string | undefined;
    slot?: string | undefined;
    spellCheck?: (boolean | "true" | "false") | undefined;
    style?: import('react').CSSProperties | undefined;
    tabIndex?: number | undefined;
    title?: string | undefined;
    translate?: "yes" | "no" | undefined;
    radioGroup?: string | undefined;
    role?: import('react').AriaRole | undefined;
    about?: string | undefined;
    content?: string | undefined;
    datatype?: string | undefined;
    inlist?: any;
    prefix?: string | undefined;
    property?: string | undefined;
    rel?: string | undefined;
    resource?: string | undefined;
    rev?: string | undefined;
    typeof?: string | undefined;
    vocab?: string | undefined;
    autoCorrect?: string | undefined;
    autoSave?: string | undefined;
    color?: string | undefined;
    itemProp?: string | undefined;
    itemScope?: boolean | undefined;
    itemType?: string | undefined;
    itemID?: string | undefined;
    itemRef?: string | undefined;
    results?: number | undefined;
    security?: string | undefined;
    unselectable?: "on" | "off" | undefined;
    popover?: "" | "auto" | "manual" | "hint" | undefined;
    popoverTargetAction?: "toggle" | "show" | "hide" | undefined;
    popoverTarget?: string | undefined;
    inert?: boolean | undefined;
    inputMode?: "none" | "text" | "tel" | "url" | "email" | "numeric" | "decimal" | "search" | undefined;
    is?: string | undefined;
    exportparts?: string | undefined;
    part?: string | undefined;
    "aria-activedescendant"?: string | undefined;
    "aria-atomic"?: (boolean | "true" | "false") | undefined;
    "aria-autocomplete"?: "none" | "inline" | "list" | "both" | undefined;
    "aria-braillelabel"?: string | undefined;
    "aria-brailleroledescription"?: string | undefined;
    "aria-busy"?: (boolean | "true" | "false") | undefined;
    "aria-checked"?: boolean | "false" | "mixed" | "true" | undefined;
    "aria-colcount"?: number | undefined;
    "aria-colindex"?: number | undefined;
    "aria-colindextext"?: string | undefined;
    "aria-colspan"?: number | undefined;
    "aria-controls"?: string | undefined;
    "aria-current"?: boolean | "false" | "true" | "page" | "step" | "location" | "date" | "time" | undefined;
    "aria-describedby"?: string | undefined;
    "aria-description"?: string | undefined;
    "aria-details"?: string | undefined;
    "aria-disabled"?: (boolean | "true" | "false") | undefined;
    "aria-dropeffect"?: "none" | "copy" | "execute" | "link" | "move" | "popup" | undefined;
    "aria-errormessage"?: string | undefined;
    "aria-expanded"?: (boolean | "true" | "false") | undefined;
    "aria-flowto"?: string | undefined;
    "aria-grabbed"?: (boolean | "true" | "false") | undefined;
    "aria-haspopup"?: boolean | "false" | "true" | "menu" | "listbox" | "tree" | "grid" | "dialog" | undefined;
    "aria-hidden"?: (boolean | "true" | "false") | undefined;
    "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
    "aria-keyshortcuts"?: string | undefined;
    "aria-label"?: string | undefined;
    "aria-labelledby"?: string | undefined;
    "aria-level"?: number | undefined;
    "aria-live"?: "off" | "assertive" | "polite" | undefined;
    "aria-modal"?: (boolean | "true" | "false") | undefined;
    "aria-multiline"?: (boolean | "true" | "false") | undefined;
    "aria-multiselectable"?: (boolean | "true" | "false") | undefined;
    "aria-orientation"?: "horizontal" | "vertical" | undefined;
    "aria-owns"?: string | undefined;
    "aria-placeholder"?: string | undefined;
    "aria-posinset"?: number | undefined;
    "aria-pressed"?: boolean | "false" | "mixed" | "true" | undefined;
    "aria-readonly"?: (boolean | "true" | "false") | undefined;
    "aria-relevant"?: "additions" | "additions removals" | "additions text" | "all" | "removals" | "removals additions" | "removals text" | "text" | "text additions" | "text removals" | undefined;
    "aria-required"?: (boolean | "true" | "false") | undefined;
    "aria-roledescription"?: string | undefined;
    "aria-rowcount"?: number | undefined;
    "aria-rowindex"?: number | undefined;
    "aria-rowindextext"?: string | undefined;
    "aria-rowspan"?: number | undefined;
    "aria-selected"?: (boolean | "true" | "false") | undefined;
    "aria-setsize"?: number | undefined;
    "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined;
    "aria-valuemax"?: number | undefined;
    "aria-valuemin"?: number | undefined;
    "aria-valuenow"?: number | undefined;
    "aria-valuetext"?: string | undefined;
    children?: import('react').ReactNode | undefined;
    dangerouslySetInnerHTML?: {
        __html: string | TrustedHTML;
    } | undefined;
    onCopy?: import('react').ClipboardEventHandler<HTMLSpanElement> | undefined;
    onCopyCapture?: import('react').ClipboardEventHandler<HTMLSpanElement> | undefined;
    onCut?: import('react').ClipboardEventHandler<HTMLSpanElement> | undefined;
    onCutCapture?: import('react').ClipboardEventHandler<HTMLSpanElement> | undefined;
    onPaste?: import('react').ClipboardEventHandler<HTMLSpanElement> | undefined;
    onPasteCapture?: import('react').ClipboardEventHandler<HTMLSpanElement> | undefined;
    onCompositionEnd?: import('react').CompositionEventHandler<HTMLSpanElement> | undefined;
    onCompositionEndCapture?: import('react').CompositionEventHandler<HTMLSpanElement> | undefined;
    onCompositionStart?: import('react').CompositionEventHandler<HTMLSpanElement> | undefined;
    onCompositionStartCapture?: import('react').CompositionEventHandler<HTMLSpanElement> | undefined;
    onCompositionUpdate?: import('react').CompositionEventHandler<HTMLSpanElement> | undefined;
    onCompositionUpdateCapture?: import('react').CompositionEventHandler<HTMLSpanElement> | undefined;
    onFocus?: import('react').FocusEventHandler<HTMLSpanElement> | undefined;
    onFocusCapture?: import('react').FocusEventHandler<HTMLSpanElement> | undefined;
    onBlur?: import('react').FocusEventHandler<HTMLSpanElement> | undefined;
    onBlurCapture?: import('react').FocusEventHandler<HTMLSpanElement> | undefined;
    onChange?: import('react').FormEventHandler<HTMLSpanElement> | undefined;
    onChangeCapture?: import('react').FormEventHandler<HTMLSpanElement> | undefined;
    onBeforeInput?: import('react').InputEventHandler<HTMLSpanElement> | undefined;
    onBeforeInputCapture?: import('react').FormEventHandler<HTMLSpanElement> | undefined;
    onInput?: import('react').FormEventHandler<HTMLSpanElement> | undefined;
    onInputCapture?: import('react').FormEventHandler<HTMLSpanElement> | undefined;
    onReset?: import('react').FormEventHandler<HTMLSpanElement> | undefined;
    onResetCapture?: import('react').FormEventHandler<HTMLSpanElement> | undefined;
    onSubmit?: import('react').FormEventHandler<HTMLSpanElement> | undefined;
    onSubmitCapture?: import('react').FormEventHandler<HTMLSpanElement> | undefined;
    onInvalid?: import('react').FormEventHandler<HTMLSpanElement> | undefined;
    onInvalidCapture?: import('react').FormEventHandler<HTMLSpanElement> | undefined;
    onLoad?: import('react').ReactEventHandler<HTMLSpanElement> | undefined;
    onLoadCapture?: import('react').ReactEventHandler<HTMLSpanElement> | undefined;
    onError?: import('react').ReactEventHandler<HTMLSpanElement> | undefined;
    onErrorCapture?: import('react').ReactEventHandler<HTMLSpanElement> | undefined;
    onKeyDown?: import('react').KeyboardEventHandler<HTMLSpanElement> | undefined;
    onKeyDownCapture?: import('react').KeyboardEventHandler<HTMLSpanElement> | undefined;
    onKeyPress?: import('react').KeyboardEventHandler<HTMLSpanElement> | undefined;
    onKeyPressCapture?: import('react').KeyboardEventHandler<HTMLSpanElement> | undefined;
    onKeyUp?: import('react').KeyboardEventHandler<HTMLSpanElement> | undefined;
    onKeyUpCapture?: import('react').KeyboardEventHandler<HTMLSpanElement> | undefined;
    onAbort?: import('react').ReactEventHandler<HTMLSpanElement> | undefined;
    onAbortCapture?: import('react').ReactEventHandler<HTMLSpanElement> | undefined;
    onCanPlay?: import('react').ReactEventHandler<HTMLSpanElement> | undefined;
    onCanPlayCapture?: import('react').ReactEventHandler<HTMLSpanElement> | undefined;
    onCanPlayThrough?: import('react').ReactEventHandler<HTMLSpanElement> | undefined;
    onCanPlayThroughCapture?: import('react').ReactEventHandler<HTMLSpanElement> | undefined;
    onDurationChange?: import('react').ReactEventHandler<HTMLSpanElement> | undefined;
    onDurationChangeCapture?: import('react').ReactEventHandler<HTMLSpanElement> | undefined;
    onEmptied?: import('react').ReactEventHandler<HTMLSpanElement> | undefined;
    onEmptiedCapture?: import('react').ReactEventHandler<HTMLSpanElement> | undefined;
    onEncrypted?: import('react').ReactEventHandler<HTMLSpanElement> | undefined;
    onEncryptedCapture?: import('react').ReactEventHandler<HTMLSpanElement> | undefined;
    onEnded?: import('react').ReactEventHandler<HTMLSpanElement> | undefined;
    onEndedCapture?: import('react').ReactEventHandler<HTMLSpanElement> | undefined;
    onLoadedData?: import('react').ReactEventHandler<HTMLSpanElement> | undefined;
    onLoadedDataCapture?: import('react').ReactEventHandler<HTMLSpanElement> | undefined;
    onLoadedMetadata?: import('react').ReactEventHandler<HTMLSpanElement> | undefined;
    onLoadedMetadataCapture?: import('react').ReactEventHandler<HTMLSpanElement> | undefined;
    onLoadStart?: import('react').ReactEventHandler<HTMLSpanElement> | undefined;
    onLoadStartCapture?: import('react').ReactEventHandler<HTMLSpanElement> | undefined;
    onPause?: import('react').ReactEventHandler<HTMLSpanElement> | undefined;
    onPauseCapture?: import('react').ReactEventHandler<HTMLSpanElement> | undefined;
    onPlay?: import('react').ReactEventHandler<HTMLSpanElement> | undefined;
    onPlayCapture?: import('react').ReactEventHandler<HTMLSpanElement> | undefined;
    onPlaying?: import('react').ReactEventHandler<HTMLSpanElement> | undefined;
    onPlayingCapture?: import('react').ReactEventHandler<HTMLSpanElement> | undefined;
    onProgress?: import('react').ReactEventHandler<HTMLSpanElement> | undefined;
    onProgressCapture?: import('react').ReactEventHandler<HTMLSpanElement> | undefined;
    onRateChange?: import('react').ReactEventHandler<HTMLSpanElement> | undefined;
    onRateChangeCapture?: import('react').ReactEventHandler<HTMLSpanElement> | undefined;
    onSeeked?: import('react').ReactEventHandler<HTMLSpanElement> | undefined;
    onSeekedCapture?: import('react').ReactEventHandler<HTMLSpanElement> | undefined;
    onSeeking?: import('react').ReactEventHandler<HTMLSpanElement> | undefined;
    onSeekingCapture?: import('react').ReactEventHandler<HTMLSpanElement> | undefined;
    onStalled?: import('react').ReactEventHandler<HTMLSpanElement> | undefined;
    onStalledCapture?: import('react').ReactEventHandler<HTMLSpanElement> | undefined;
    onSuspend?: import('react').ReactEventHandler<HTMLSpanElement> | undefined;
    onSuspendCapture?: import('react').ReactEventHandler<HTMLSpanElement> | undefined;
    onTimeUpdate?: import('react').ReactEventHandler<HTMLSpanElement> | undefined;
    onTimeUpdateCapture?: import('react').ReactEventHandler<HTMLSpanElement> | undefined;
    onVolumeChange?: import('react').ReactEventHandler<HTMLSpanElement> | undefined;
    onVolumeChangeCapture?: import('react').ReactEventHandler<HTMLSpanElement> | undefined;
    onWaiting?: import('react').ReactEventHandler<HTMLSpanElement> | undefined;
    onWaitingCapture?: import('react').ReactEventHandler<HTMLSpanElement> | undefined;
    onAuxClick?: import('react').MouseEventHandler<HTMLSpanElement> | undefined;
    onAuxClickCapture?: import('react').MouseEventHandler<HTMLSpanElement> | undefined;
    onClickCapture?: import('react').MouseEventHandler<HTMLSpanElement> | undefined;
    onContextMenu?: import('react').MouseEventHandler<HTMLSpanElement> | undefined;
    onContextMenuCapture?: import('react').MouseEventHandler<HTMLSpanElement> | undefined;
    onDoubleClick?: import('react').MouseEventHandler<HTMLSpanElement> | undefined;
    onDoubleClickCapture?: import('react').MouseEventHandler<HTMLSpanElement> | undefined;
    onDrag?: import('react').DragEventHandler<HTMLSpanElement> | undefined;
    onDragCapture?: import('react').DragEventHandler<HTMLSpanElement> | undefined;
    onDragEnd?: import('react').DragEventHandler<HTMLSpanElement> | undefined;
    onDragEndCapture?: import('react').DragEventHandler<HTMLSpanElement> | undefined;
    onDragEnter?: import('react').DragEventHandler<HTMLSpanElement> | undefined;
    onDragEnterCapture?: import('react').DragEventHandler<HTMLSpanElement> | undefined;
    onDragExit?: import('react').DragEventHandler<HTMLSpanElement> | undefined;
    onDragExitCapture?: import('react').DragEventHandler<HTMLSpanElement> | undefined;
    onDragLeave?: import('react').DragEventHandler<HTMLSpanElement> | undefined;
    onDragLeaveCapture?: import('react').DragEventHandler<HTMLSpanElement> | undefined;
    onDragOver?: import('react').DragEventHandler<HTMLSpanElement> | undefined;
    onDragOverCapture?: import('react').DragEventHandler<HTMLSpanElement> | undefined;
    onDragStart?: import('react').DragEventHandler<HTMLSpanElement> | undefined;
    onDragStartCapture?: import('react').DragEventHandler<HTMLSpanElement> | undefined;
    onDrop?: import('react').DragEventHandler<HTMLSpanElement> | undefined;
    onDropCapture?: import('react').DragEventHandler<HTMLSpanElement> | undefined;
    onMouseDown?: import('react').MouseEventHandler<HTMLSpanElement> | undefined;
    onMouseDownCapture?: import('react').MouseEventHandler<HTMLSpanElement> | undefined;
    onMouseEnter?: import('react').MouseEventHandler<HTMLSpanElement> | undefined;
    onMouseLeave?: import('react').MouseEventHandler<HTMLSpanElement> | undefined;
    onMouseMove?: import('react').MouseEventHandler<HTMLSpanElement> | undefined;
    onMouseMoveCapture?: import('react').MouseEventHandler<HTMLSpanElement> | undefined;
    onMouseOut?: import('react').MouseEventHandler<HTMLSpanElement> | undefined;
    onMouseOutCapture?: import('react').MouseEventHandler<HTMLSpanElement> | undefined;
    onMouseOver?: import('react').MouseEventHandler<HTMLSpanElement> | undefined;
    onMouseOverCapture?: import('react').MouseEventHandler<HTMLSpanElement> | undefined;
    onMouseUp?: import('react').MouseEventHandler<HTMLSpanElement> | undefined;
    onMouseUpCapture?: import('react').MouseEventHandler<HTMLSpanElement> | undefined;
    onSelect?: import('react').ReactEventHandler<HTMLSpanElement> | undefined;
    onSelectCapture?: import('react').ReactEventHandler<HTMLSpanElement> | undefined;
    onTouchCancel?: import('react').TouchEventHandler<HTMLSpanElement> | undefined;
    onTouchCancelCapture?: import('react').TouchEventHandler<HTMLSpanElement> | undefined;
    onTouchEnd?: import('react').TouchEventHandler<HTMLSpanElement> | undefined;
    onTouchEndCapture?: import('react').TouchEventHandler<HTMLSpanElement> | undefined;
    onTouchMove?: import('react').TouchEventHandler<HTMLSpanElement> | undefined;
    onTouchMoveCapture?: import('react').TouchEventHandler<HTMLSpanElement> | undefined;
    onTouchStart?: import('react').TouchEventHandler<HTMLSpanElement> | undefined;
    onTouchStartCapture?: import('react').TouchEventHandler<HTMLSpanElement> | undefined;
    onPointerDown?: import('react').PointerEventHandler<HTMLSpanElement> | undefined;
    onPointerDownCapture?: import('react').PointerEventHandler<HTMLSpanElement> | undefined;
    onPointerMove?: import('react').PointerEventHandler<HTMLSpanElement> | undefined;
    onPointerMoveCapture?: import('react').PointerEventHandler<HTMLSpanElement> | undefined;
    onPointerUp?: import('react').PointerEventHandler<HTMLSpanElement> | undefined;
    onPointerUpCapture?: import('react').PointerEventHandler<HTMLSpanElement> | undefined;
    onPointerCancel?: import('react').PointerEventHandler<HTMLSpanElement> | undefined;
    onPointerCancelCapture?: import('react').PointerEventHandler<HTMLSpanElement> | undefined;
    onPointerEnter?: import('react').PointerEventHandler<HTMLSpanElement> | undefined;
    onPointerLeave?: import('react').PointerEventHandler<HTMLSpanElement> | undefined;
    onPointerOver?: import('react').PointerEventHandler<HTMLSpanElement> | undefined;
    onPointerOverCapture?: import('react').PointerEventHandler<HTMLSpanElement> | undefined;
    onPointerOut?: import('react').PointerEventHandler<HTMLSpanElement> | undefined;
    onPointerOutCapture?: import('react').PointerEventHandler<HTMLSpanElement> | undefined;
    onGotPointerCapture?: import('react').PointerEventHandler<HTMLSpanElement> | undefined;
    onGotPointerCaptureCapture?: import('react').PointerEventHandler<HTMLSpanElement> | undefined;
    onLostPointerCapture?: import('react').PointerEventHandler<HTMLSpanElement> | undefined;
    onLostPointerCaptureCapture?: import('react').PointerEventHandler<HTMLSpanElement> | undefined;
    onScroll?: import('react').UIEventHandler<HTMLSpanElement> | undefined;
    onScrollCapture?: import('react').UIEventHandler<HTMLSpanElement> | undefined;
    onScrollEnd?: import('react').UIEventHandler<HTMLSpanElement> | undefined;
    onScrollEndCapture?: import('react').UIEventHandler<HTMLSpanElement> | undefined;
    onWheel?: import('react').WheelEventHandler<HTMLSpanElement> | undefined;
    onWheelCapture?: import('react').WheelEventHandler<HTMLSpanElement> | undefined;
    onAnimationStart?: import('react').AnimationEventHandler<HTMLSpanElement> | undefined;
    onAnimationStartCapture?: import('react').AnimationEventHandler<HTMLSpanElement> | undefined;
    onAnimationEnd?: import('react').AnimationEventHandler<HTMLSpanElement> | undefined;
    onAnimationEndCapture?: import('react').AnimationEventHandler<HTMLSpanElement> | undefined;
    onAnimationIteration?: import('react').AnimationEventHandler<HTMLSpanElement> | undefined;
    onAnimationIterationCapture?: import('react').AnimationEventHandler<HTMLSpanElement> | undefined;
    onToggle?: import('react').ToggleEventHandler<HTMLSpanElement> | undefined;
    onBeforeToggle?: import('react').ToggleEventHandler<HTMLSpanElement> | undefined;
    onTransitionCancel?: import('react').TransitionEventHandler<HTMLSpanElement> | undefined;
    onTransitionCancelCapture?: import('react').TransitionEventHandler<HTMLSpanElement> | undefined;
    onTransitionEnd?: import('react').TransitionEventHandler<HTMLSpanElement> | undefined;
    onTransitionEndCapture?: import('react').TransitionEventHandler<HTMLSpanElement> | undefined;
    onTransitionRun?: import('react').TransitionEventHandler<HTMLSpanElement> | undefined;
    onTransitionRunCapture?: import('react').TransitionEventHandler<HTMLSpanElement> | undefined;
    onTransitionStart?: import('react').TransitionEventHandler<HTMLSpanElement> | undefined;
    onTransitionStartCapture?: import('react').TransitionEventHandler<HTMLSpanElement> | undefined;
    className: string | undefined;
}, HTMLElement>;
export {};
//# sourceMappingURL=component.d.ts.map